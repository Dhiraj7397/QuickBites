package com.app.project.main.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration // equivalent to bean config xml
@EnableWebSecurity // to enable annotation support for spring sec
public class SecurityConfiguration {
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private CustomJWTAuthenticationFilter customJWTAuthenticationFilter;

	// Configure the bean to customize spring security filter chain
//	@Bean
//	public SecurityFilterChain authorizeRequests(HttpSecurity http) throws Exception {
//		// 1. Disable CSRF filter
//		http.csrf(customizer -> customizer.disable())
//				// 2. configure URL based access
//				.authorizeHttpRequests(request -> request
//						.requestMatchers("/api/users/login", "/api/users", "/v*/api-doc*/**", "/swagger-ui/**")
//						.permitAll()
//						// required explicitly for JS clients (eg React app - to permit pre flight
//						// requests)
//						.requestMatchers(HttpMethod.OPTIONS).permitAll().requestMatchers("/api/restaurants/**")
//						.hasAnyAuthority("ROLE_CUSTOMER").requestMatchers("/api/foods/**").hasAnyAuthority("ROLE_ADMIN").anyRequest()
//						.authenticated())
//				// .httpBasic(Customizer.withDefaults()) - replacing it by custom JWT filter
//				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
//		// adding custom JWT fi;lter before any auth filter
//		http.addFilterBefore(customJWTAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
//		return http.build();
//	}
	@Bean
	public SecurityFilterChain authorizeRequests(HttpSecurity http) throws Exception {
	    http.csrf(customizer -> customizer.disable())
	            .authorizeHttpRequests(request -> request
	                    .requestMatchers("/api/users/login", "/api/users", "/v*/api-doc*/**", "/swagger-ui/**")
	                    .permitAll()
	                    .requestMatchers(HttpMethod.OPTIONS).permitAll()
	                    .requestMatchers("/api/restaurants/**")
	                    .hasRole("CUSTOMER")  // Use hasRole instead of hasAuthority
	                    .requestMatchers("/api/foods/**")
	                    .hasRole("ADMIN")  // Use hasRole instead of hasAuthority
	                    .anyRequest().authenticated())
	            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

	    http.addFilterBefore(customJWTAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

	    return http.build();
	}
//	@Bean
//	public SecurityFilterChain authorizeRequests(HttpSecurity http) throws Exception {
//	    http.csrf().disable()
//	        .authorizeRequests()
//	            .requestMatchers("/api/users/login", "/api/users", "/v*/api-doc*/**", "/swagger-ui/**")
//	            .permitAll()
//	            .requestMatchers(HttpMethod.OPTIONS).permitAll()
//	            .requestMatchers("/api/restaurants/**")
//	            .hasAuthority("ROLE_CUSTOMER")
//	            .requestMatchers("/api/foods/**")
//	            .hasAuthority("ROLE_ADMIN")
//	            .anyRequest()
//	            .authenticated()
//	        .and()
//	        .sessionManagement()
//	            .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//
//	    // Adding custom JWT filter before authentication filter
//	    http.addFilterBefore(customJWTAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
//	    return http.build();
//	}


	// to supply Auth Mgr , configure it as a spring bean
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}

}
