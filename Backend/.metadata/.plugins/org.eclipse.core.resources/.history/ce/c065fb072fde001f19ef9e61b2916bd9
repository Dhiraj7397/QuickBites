package com.app.project.main.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.app.project.main.custom_exceptions.ResourceNotFoundException;
import com.app.project.main.dto.ApiResponse;
import com.app.project.main.dto.UserDTO;
import com.app.project.main.services.UserService;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "http://localhost:3000")
public class UserController {

	@Autowired
	private UserService userService;

	// Get All Users
	@GetMapping
	public ResponseEntity<List<UserDTO>> getAllUsers() {
		List<UserDTO> users = userService.getAllUsers();
		return ResponseEntity.ok(users); // 200 OK
	}

	// Get User by ID
	@GetMapping("/{id}")
	public ResponseEntity<UserDTO> getUserById(@PathVariable int id) {
		UserDTO userDTO = userService.getUserById(id)
				.orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
		return ResponseEntity.ok(userDTO); // 200 OK
	}

	// Create a new User
	@PostMapping
	public ResponseEntity<ApiResponse> createUser(@RequestBody UserDTO userDTO) {
		try {
			userService.createUser(userDTO);
			return ResponseEntity.status(HttpStatus.CREATED).body(new ApiResponse("User created successfully")); // 201
																													// Created
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body(new ApiResponse("An error occurred while creating the user")); // 500 Internal Server Error
		}
	}

	// Update an existing User
	@PutMapping("/{id}")
	public ResponseEntity<?> updateUser(@PathVariable int id, @RequestBody UserDTO userDTO) {
		return userService.updateUser(id, userDTO)
				.map(updatedUser -> ResponseEntity.ok(new ApiResponse("User updated successfully"))) // 200 OK
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND)
						.body(new ApiResponse("User not found with ID: " + id))); // 404 Not Found
	}

	// Delete a User by ID
	@DeleteMapping("/{id}")
	public ResponseEntity<ApiResponse> deleteUser(@PathVariable int id) {
		boolean isDeleted = userService.deleteUser(id);
		if (isDeleted) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(new ApiResponse("User deleted successfully")); // 204
																													// No
																													// Content
		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse("User not found with ID: " + id)); // 404
																														// Not
																														// Found
		}
	}
}
